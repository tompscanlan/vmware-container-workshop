default:
  desc: Build and test that the image was built
  cmds:
    - task: build-image
    - task: test

build-app-in-container:
  desc: Run a go build in a golang container
  cmds:
    - docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp golang:1.9.2 bash -c "CGO_ENABLED=0 go build -v -ldflags '-s' -a -o app-linux-amd64"
  sources:
    - ./*.go
  generates:
    - app-linux-amd64

build-app:
  desc: Run a go build assuming go is installed
  cmds:
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -v -ldflags '-s' -a -o app-linux-amd64
  sources:
    - ./*.go
  generates:
    - app-linux-amd64


build-image:
  desc: Run docker build to create an image
  deps: [build-app]
  cmds:
    - docker build -t {{.name}}:{{.tag}} .
  sources:
    - Dockerfile
  status:
    - docker images | grep "^{{.name}}" | grep -q {{.tag}}

test:
  desc: Test that the service serves
  deps: [run]
  cmds:
    - curl localhost:{{.serviceport}}

start:
  desc: Start the container if it already exists
  deps: [run]
  cmds:
    - docker start {{.contianername}}
  status:
    - docker ps -a | grep "{{.contianername}}" | grep -v Exited

run:
  desc: Run the container with the local directiro bind mounted
  deps: [build-image]
  cmds:
    - docker run -d --name {{.contianername}}
          -p 9081:8080
          {{.name}}:{{.tag}}
  status:
    - docker ps -a -f "name={{.contianername}}" | grep {{.contianername}}

logs:
  desc: View the logs from the container
  cmds:
    - docker logs "{{.contianername}}"

wipe:
  desc: Stop and remove the container
  deps: [wipe-app]
  cmds:
    - docker rm -f {{.contianername}}
  status:
    - out=`docker ps -a` && echo $out | grep -qv "{{.contianername}}"

wipe-app:
  desc: remove the binary
  cmds:
    - rm -f app-linux-amd64
  status:
    - test ! -f app-linux-amd64
